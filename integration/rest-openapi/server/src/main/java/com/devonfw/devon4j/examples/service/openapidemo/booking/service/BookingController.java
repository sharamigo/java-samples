package com.devonfw.devon4j.examples.service.openapidemo.booking.service;

import com.devonfw.devon4j.generated.api.model.BookingTO;
import com.devonfw.devon4j.generated.api.service.BookingApi;
import com.devonfw.devon4j.examples.service.openapidemo.booking.logic.BookingManager;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

/**
 * This class is implementing the generated Booking Api endpoint
 * By implementing the BookingApi interface Spring annotations are already set up
 * and only the logic has to be written
 *
 * besides the RestController the Models are also generated by the OpenApi Generator
 * (BookingTO, InvitedGuestTO) and are simple data classes
 *
 */

@RestController
public class BookingController implements BookingApi {

    /**
     * The BookingManager from the logic layer is called to manage all logic tasks
     */
    private BookingManager bookingManager;

    public BookingController(BookingManager bookingManager) {
        this.bookingManager = bookingManager;
    }

    /**
     * Create the post /booking endpoint to create new bookings
     * @param bookingTO  the Booking to create
     * @return the created Booking with response code
     */
    @Override
    public ResponseEntity<BookingTO> createBooking(BookingTO bookingTO) {
        return new ResponseEntity<>(bookingManager.createBooking(bookingTO), HttpStatus.CREATED);
    }

    /**
     * Creates the get /booking endpoint to get a list of all bookings
     * @return a list of all bookings with response code
     */
    @Override
    public ResponseEntity<List<BookingTO>> getBookingAll() {
        return new ResponseEntity(bookingManager.getAllBookings(), HttpStatus.OK);
    }

    /**
     * Creates a the get /booking/{id} endpoint to get a single booking by id
     * @param bookingId ID of booking to return (required)
     * @return the booking with the id with response code
     */
    @Override
    public ResponseEntity<BookingTO> getBookingById(Long bookingId) {
        return new ResponseEntity(bookingManager.getBooking(bookingId), HttpStatus.OK);
    }
}
